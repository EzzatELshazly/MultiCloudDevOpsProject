pipeline {
    agent any

    environment {
        
        DOCKER_REGISTRY = "ezzatelshazly"
        DOCKER_IMAGE = "task6-jenkins-pipeline-1"
        imageTagApp = "build-${BUILD_NUMBER}-app"
        imageNameapp = "${DOCKER_REGISTRY}:${imageTagApp}"
        OPENSHIFT_PROJECT = 'ezzatelshazly'
        GITHUB_REPO = "EzzatELshazly/new-app"
        OPENSHIFT_SERVER = 'https://api.ocpuat.devopsconsulting.org:6443'
        APP_SERVICE_NAME = 'task6-jenkins-pipeline-1'
        APP_PORT = '8080'
        APP_HOST_NAME = 'task6-jenkins-pipeline-1.apps.ocpuat.devopsconsulting.org'
        
        }

    stages {
        
        
        stage('Checkout') {
            steps {
                git url: "https://github.com/${GITHUB_REPO}.git", branch: 'main'
            }
        }
        
        stage('Unit Test before building image') {
            steps {
                sh "chmod +x gradlew"
                sh "./gradlew test --stacktrace"
            }
        }
        
        stage('SonarQube Test'){
            steps{
                withSonarQubeEnv() {
                 sh "./gradlew sonar"
            }
         }
    
        }  
        
        stage('Build Docker image') {
            steps {

                    sh "docker build -t ${imageNameapp} ."

                    sh "docker tag ${imageNameapp} docker.io/${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTagApp}"
                    
                }
            }
        
        stage('Push image to docker hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_REGISTRY_USERNAME', passwordVariable: 'DOCKER_REGISTRY_PASSWORD')]) {
                   
                    sh "echo \${DOCKER_REGISTRY_PASSWORD} | docker login -u \${DOCKER_REGISTRY_USERNAME} --password-stdin"

                    sh "docker push docker.io/${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTagApp}"
                    
                    sh "docker rmi -f ${imageNameapp}"
                }
            }
        }

        stage('Deploy image to OpenShift') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'openshift-token', variable: 'OPENSHIFT_SECRET')]) {
                    sh "oc login --token=\${OPENSHIFT_SECRET} \${OPENSHIFT_SERVER} --insecure-skip-tls-verify"
                    }
                    // To go into my project 
                    sh "oc project \${OPENSHIFT_PROJECT}"
                    // delete the project within the same name to avoid conflicts
                    sh "oc delete dc,svc,deploy,ingress,route \${DOCKER_IMAGE} || true"
                    // new-app to create deployment, service and route. 
                    sh "oc new-app ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTagApp} --token=\${OPENSHIFT_SECRET}"
                    // Expose the service 
                    sh "oc expose service/${APP_SERVICE_NAME}"
                  

                }
            }
        }
        
        
}
}
